// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/critical_css.proto

#ifndef PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();

class CriticalCssSet;
class CriticalCssSet_CriticalCss;

// ===================================================================

class CriticalCssSet_CriticalCss : public ::google::protobuf::MessageLite {
 public:
  CriticalCssSet_CriticalCss();
  virtual ~CriticalCssSet_CriticalCss();
  
  CriticalCssSet_CriticalCss(const CriticalCssSet_CriticalCss& from);
  
  inline CriticalCssSet_CriticalCss& operator=(const CriticalCssSet_CriticalCss& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CriticalCssSet_CriticalCss& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CriticalCssSet_CriticalCss* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(CriticalCssSet_CriticalCss* other);
  
  // implements Message ----------------------------------------------
  
  CriticalCssSet_CriticalCss* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CriticalCssSet_CriticalCss& from);
  void MergeFrom(const CriticalCssSet_CriticalCss& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string link_url = 1;
  inline bool has_link_url() const;
  inline void clear_link_url();
  static const int kLinkUrlFieldNumber = 1;
  inline const ::std::string& link_url() const;
  inline void set_link_url(const ::std::string& value);
  inline void set_link_url(const char* value);
  inline void set_link_url(const char* value, size_t size);
  inline ::std::string* mutable_link_url();
  inline ::std::string* release_link_url();
  
  // optional string critical_rules = 2;
  inline bool has_critical_rules() const;
  inline void clear_critical_rules();
  static const int kCriticalRulesFieldNumber = 2;
  inline const ::std::string& critical_rules() const;
  inline void set_critical_rules(const ::std::string& value);
  inline void set_critical_rules(const char* value);
  inline void set_critical_rules(const char* value, size_t size);
  inline ::std::string* mutable_critical_rules();
  inline ::std::string* release_critical_rules();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.CriticalCssSet.CriticalCss)
 private:
  inline void set_has_link_url();
  inline void clear_has_link_url();
  inline void set_has_critical_rules();
  inline void clear_has_critical_rules();
  
  ::std::string* link_url_;
  ::std::string* critical_rules_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  
  void InitAsDefaultInstance();
  static CriticalCssSet_CriticalCss* default_instance_;
};
// -------------------------------------------------------------------

class CriticalCssSet : public ::google::protobuf::MessageLite {
 public:
  CriticalCssSet();
  virtual ~CriticalCssSet();
  
  CriticalCssSet(const CriticalCssSet& from);
  
  inline CriticalCssSet& operator=(const CriticalCssSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CriticalCssSet& default_instance();
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CriticalCssSet* internal_default_instance() {
    return default_instance_;
  }
  #endif
  
  void Swap(CriticalCssSet* other);
  
  // implements Message ----------------------------------------------
  
  CriticalCssSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CriticalCssSet& from);
  void MergeFrom(const CriticalCssSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef CriticalCssSet_CriticalCss CriticalCss;
  
  // accessors -------------------------------------------------------
  
  // repeated .net_instaweb.CriticalCssSet.CriticalCss critical_css = 1;
  inline int critical_css_size() const;
  inline void clear_critical_css();
  static const int kCriticalCssFieldNumber = 1;
  inline const ::net_instaweb::CriticalCssSet_CriticalCss& critical_css(int index) const;
  inline ::net_instaweb::CriticalCssSet_CriticalCss* mutable_critical_css(int index);
  inline ::net_instaweb::CriticalCssSet_CriticalCss* add_critical_css();
  inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssSet_CriticalCss >&
      critical_css() const;
  inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssSet_CriticalCss >*
      mutable_critical_css();
  
  // @@protoc_insertion_point(class_scope:net_instaweb.CriticalCssSet)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssSet_CriticalCss > critical_css_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto();
  
  void InitAsDefaultInstance();
  static CriticalCssSet* default_instance_;
};
// ===================================================================


// ===================================================================

// CriticalCssSet_CriticalCss

// optional string link_url = 1;
inline bool CriticalCssSet_CriticalCss::has_link_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CriticalCssSet_CriticalCss::set_has_link_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CriticalCssSet_CriticalCss::clear_has_link_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CriticalCssSet_CriticalCss::clear_link_url() {
  if (link_url_ != &::google::protobuf::internal::kEmptyString) {
    link_url_->clear();
  }
  clear_has_link_url();
}
inline const ::std::string& CriticalCssSet_CriticalCss::link_url() const {
  return *link_url_;
}
inline void CriticalCssSet_CriticalCss::set_link_url(const ::std::string& value) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(value);
}
inline void CriticalCssSet_CriticalCss::set_link_url(const char* value) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(value);
}
inline void CriticalCssSet_CriticalCss::set_link_url(const char* value, size_t size) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CriticalCssSet_CriticalCss::mutable_link_url() {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    link_url_ = new ::std::string;
  }
  return link_url_;
}
inline ::std::string* CriticalCssSet_CriticalCss::release_link_url() {
  clear_has_link_url();
  if (link_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = link_url_;
    link_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string critical_rules = 2;
inline bool CriticalCssSet_CriticalCss::has_critical_rules() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CriticalCssSet_CriticalCss::set_has_critical_rules() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CriticalCssSet_CriticalCss::clear_has_critical_rules() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CriticalCssSet_CriticalCss::clear_critical_rules() {
  if (critical_rules_ != &::google::protobuf::internal::kEmptyString) {
    critical_rules_->clear();
  }
  clear_has_critical_rules();
}
inline const ::std::string& CriticalCssSet_CriticalCss::critical_rules() const {
  return *critical_rules_;
}
inline void CriticalCssSet_CriticalCss::set_critical_rules(const ::std::string& value) {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  critical_rules_->assign(value);
}
inline void CriticalCssSet_CriticalCss::set_critical_rules(const char* value) {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  critical_rules_->assign(value);
}
inline void CriticalCssSet_CriticalCss::set_critical_rules(const char* value, size_t size) {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  critical_rules_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CriticalCssSet_CriticalCss::mutable_critical_rules() {
  set_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    critical_rules_ = new ::std::string;
  }
  return critical_rules_;
}
inline ::std::string* CriticalCssSet_CriticalCss::release_critical_rules() {
  clear_has_critical_rules();
  if (critical_rules_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = critical_rules_;
    critical_rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CriticalCssSet

// repeated .net_instaweb.CriticalCssSet.CriticalCss critical_css = 1;
inline int CriticalCssSet::critical_css_size() const {
  return critical_css_.size();
}
inline void CriticalCssSet::clear_critical_css() {
  critical_css_.Clear();
}
inline const ::net_instaweb::CriticalCssSet_CriticalCss& CriticalCssSet::critical_css(int index) const {
  return critical_css_.Get(index);
}
inline ::net_instaweb::CriticalCssSet_CriticalCss* CriticalCssSet::mutable_critical_css(int index) {
  return critical_css_.Mutable(index);
}
inline ::net_instaweb::CriticalCssSet_CriticalCss* CriticalCssSet::add_critical_css() {
  return critical_css_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssSet_CriticalCss >&
CriticalCssSet::critical_css() const {
  return critical_css_;
}
inline ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalCssSet_CriticalCss >*
CriticalCssSet::mutable_critical_css() {
  return &critical_css_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2frewriter_2fcritical_5fcss_2eproto__INCLUDED
